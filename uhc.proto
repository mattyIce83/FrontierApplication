/***************************************************************************************/
/*                                                                                     */
/* uhc.proto - Henny Penny UHC (Frontier project) system messages to be published by   */
/* either the Controller or the Intelligent Glass modules                              */
/*                                                                                     */
/***************************************************************************************/



/***************************************************************************************/
/*                                                                                     */
/*  The Frontier project uses Google Protocol Buffers to define the messages used      */
/*  by the Controller and Intelligent Glass modules. ZeroMQ is used as the             */
/*  transport mechanism for all of these system messages. Specifically, ZeroMQ's       */
/*  Publish/Subscribe model is used to exchange messages between these devices.        */
/*                                                                                     */
/*  For more information on Google Protocol Buffers, see:                              */
/*  https://protobuf.dev/getting-started/cpptutorial/                                  */
/*                                                                                     */
/*  For more information on ZeroMQ, see:                                               */
/*  https://zguide.zeromq.org/                                                         */
/*                                                                                     */
/*  For this project, the controller will have a static IP address of 192.168.1.200    */
/*  All messages published by the controller will publish its ZeroMQ messages on port  */
/*  numbers that end with a zero, such as 5000, 5010, etc.                             */
/*                                                                                     */
/*  Intelligent Glass 1 (front) will have a static IP address of 192.168.1.201, and    */
/*  will publish its ZeroMQ messages on port numbers that end with a one, such as      */
/*  5001, 5011, etc.                                                                   */
/*                                                                                     */
/*  Intelligent Glass 2 (rear) will have a static IP address of 192.168.1.202, and     */
/*  will publish its ZeroMQ messages on port numbers that end with a one, such as      */
/*  5002, 5012, etc.                                                                   */
/*                                                                                     */
/*  The tens digit of the port number will correspond to the ZeroMQ message that       */
/*  was originally sent. For example, the FirmwareUpdate message is sent on port       */
/*  5040, and the response will be sent on port 5041. This aids in debugging if        */
/*  a tool such as Wireshark is used to capture packet traces.                         */
/*                                                                                     */
/***************************************************************************************/

syntax = "proto3";

package uhc;

import "google/protobuf/timestamp.proto";

enum EcoModeState
{
	ECO_MODE_UNKNOWN = 0;
	ECO_MODE_OFF = 1;
	ECO_MODE_ON = 2;
}

enum FanNumber
{
	FAN_NUMBER_UNKNOWN = 0;
	FAN_NUMBER_1 = 1;
	FAN_NUMBER_2 = 2;
	FAN_NUMBER_BOTH = 3;
}

enum FanState
{
	FAN_STATE_UNKNOWN = 0;
	FAN_STATE_OFF = 1;
	FAN_STATE_ON = 2;
}

enum SystemStatus
{
	SYSTEM_STATUS_UNKNOWN = 0;
	SYSTEM_STATUS_NORMAL = 1;
	SYSTEM_STATUS_ERROR = 2;
	SYSTEM_STATUS_STARTUP = 3;
	SYSTEM_STATUS_STARTUP_COMPLETE = 4;
}

enum AlarmCode
{
	ALARM_CODE_UNKNOWN = 0;
	ALARM_CODE_NONE = 1;
	ALARM_CODE_HEATER_FAILED = 2;
	ALARM_CODE_INTELLIGENT_GLASS_FAILURE = 3;
	ALARM_CODE_SLOT_OVER_TEMP = 4;
	ALARM_CODE_SLOT_UNDER_TEMP = 5;
	ALARM_CODE_SLOT_TIME_LIMIT_EXCEEDED = 6;
	ALARM_CODE_GENERAL_COMMUNICATIONS_ERROR = 7;
	ALARM_CODE_HEATSINK_OVER_TEMP = 8;
	ALARM_CODE_SD_CARD_MISSING = 9;
   ALARM_CODE_AMBIENT_OVER_TEMP = 10;
   ALARM_CODE_HARDWARE_FAILURE = 11;
}

enum HeaterState
{
	HEATER_STATE_UNKNOWN = 0;
	HEATER_STATE_OFF = 1;
	HEATER_STATE_ON = 2;
	HEATER_STATE_ECO = 3;
}

enum SlotNumber
{
	SLOT_NUMBER_UNKNOWN = 0;
	SLOT_NUMBER_ONE = 1;
	SLOT_NUMBER_TWO = 2;
	SLOT_NUMBER_THREE = 3;
	SLOT_NUMBER_FOUR = 4;
	SLOT_NUMBER_FIVE = 5;
	SLOT_NUMBER_SIX = 6;
}

enum HeaterLocation
{
	HEATER_LOCATION_UNKNOWN = 0;
	HEATER_LOCATION_LOWER = 1;
	HEATER_LOCATION_UPPER = 2;
}

enum LEDState
{
	LED_STATE_UNKNOWN = 0;
	LED_STATE_OFF = 1;
	LED_STATE_RED = 2;
	LED_STATE_GREEN = 3;
}
	
enum SystemCommands
{
	SYSTEM_COMMAND_UNKNOWN = 0;
	SYSTEM_COMMAND_HEATER_ON = 1;
	SYSTEM_COMMAND_HEATER_OFF = 2;
	SYSTEM_COMMAND_SHUTDOWN_REQUESTED = 3;
	SYSTEM_COMMAND_EMERGENCY_STOP = 4;
	SYSTEM_COMMAND_STARTUP = 5;
	SYSTEM_COMMAND_IDLE = 6;
	SYSTEM_COMMAND_UPDATE_SLOT_TEMP_SETPOINT = 7;
	SYSTEM_COMMAND_SET_DURATION = 8;
	SYSTEM_COMMAND_SET_ECO_MODE_TIME = 9;
	SYSTEM_COMMAND_SET_ECO_MODE_TEMP = 10;
	SYSTEM_COMMAND_FAN_ON = 11;
	SYSTEM_COMMAND_FAN_OFF = 12;
	SYSTEM_COMMAND_CLEANING_MODE_ON = 13;
	SYSTEM_COMMAND_CLEANING_MODE_OFF = 14;
	SYSTEM_COMMAND_SET_HEATER_TEMP_SETPOINT = 15;
	SYSTEM_COMMAND_ESTABLISH_LINK = 16;
	SYSTEM_COMMAND_ECO_MODE_ON = 17;
	SYSTEM_COMMAND_ECO_MODE_OFF = 18;
   SYSTEM_COMMAND_NSO_MODE_ON = 19;
   SYSTEM_COMMAND_DEMO_MODE_ON = 20;
   SYSTEM_COMMAND_DEMO_MODE_OFF = 21;
   SYSTEM_COMMAND_CONFIGURE_LOGGING = 22;
}
	
enum SystemCommandResponses
{
	SYSTEM_COMMAND_RESPONSE_UNKNOWN = 0;
	SYSTEM_COMMAND_RESPONSE_OK = 1;
	SYSTEM_COMMAND_RESPONSE_BAD_PARAMETER = 2;
	SYSTEM_COMMAND_RESPONSE_SHUTDOWN_PENDING = 3;
	SYSTEM_COMMAND_RESPONSE_FAILURE = 4;
	SYSTEM_COMMAND_RESPONSE_LINK_ESTABLISHED = 5;
}

message HeaterData
{
	HeaterState state = 1;
	HeaterLocation location = 2;
	int32 thermistor_temp = 3;
	int32 setpoint_temp = 4;
	LEDState led_state = 5;
	google.protobuf.Timestamp start_time = 6;
	google.protobuf.Timestamp end_time = 7;
	bool is_open = 8;
	bool is_shorted = 9;
	bool is_overtemp = 10;
	bool is_undertemp = 11;
	bool is_enabled = 12;
}

message SlotData
{
	SlotNumber slot_number = 1;
	HeaterData heater_location_lower = 2;
	HeaterData heater_location_upper = 3;
}


// The controller publishes the CurrentSystemState message once per second 
// and it contains the latest snapshot of the state of the controller and 
// all of the heaters
// Published by the controller on port 5000
message CurrentSystemState
{
	message SystemData
	{
		google.protobuf.Timestamp current_time = 1;
		google.protobuf.Timestamp system_up_time = 2;
		int32 heatsink_temp = 3;
		FanState fan_state1 = 4;
		FanState fan_state2 = 5;
		float current_power_consumption = 6;
		SystemStatus system_status = 7;
		AlarmCode alarm_code = 8;
		google.protobuf.Timestamp last_time_intelligent_glass_1_heard = 9;
		google.protobuf.Timestamp last_time_intelligent_glass_2_heard = 10;
		bytes controller_IP_address = 11;
		bytes intelligent_glass_1_ip_address = 12;
		bytes intelligent_glass_2_ip_address = 13;
		int32 configured_eco_mode_temp = 14;
		uint32 configured_eco_mode_minutes = 15;
		EcoModeState eco_mode_state = 16;
		bool shutdown_requested = 17;
		uint32 last_command_received = 18;
		bytes last_command_ip_address = 19;
		bool heatsink_over_temp = 20;
		bytes hp_error_code = 21;
		int32 ambient_temp = 22;
      bool logging_is_event_driven = 23;
      uint32 logging_period_seconds = 24;
      bool nso_mode = 25;
      bool demo_mode = 26;
	}

	bytes topic = 1;						// CSS
	SystemData system_data = 2;
	repeated SlotData slot_data = 3;
	bytes serial_number = 4;
	bytes model_number = 5;
	bytes firmware_version = 6;
	uint32 sequence_number = 7;
	uint32 hardware_revision = 8;
}

// The HeartBeat message is published by each GUI computer once per second to
// ensure that the communications path is functioning
// Published by GUI1 on port 5011
// Published by GUI2 on port 5012
message HeartBeat
{
	bytes topic = 1;						// HB
	bytes sender_ip_address = 2;
	uint32 sequence_number = 3;
	bool is_master = 4;
}

// The SystemCommand message is published by either GUI computer as needed
// For example, when the user has changed a setting for any of the heaters
// Published by GUI1 on port 5021
// Published by GUI2 on port 5022
message SystemCommand
{
	bytes topic = 1;						// CMD
	bytes sender_ip_address = 2;
	uint32 sequence_number = 3;
	SystemCommands command = 4;
	SlotNumber slot_number = 5;
	uint32 temperature = 6;
	google.protobuf.Timestamp start_time = 7;
	google.protobuf.Timestamp end_time = 8;
	uint32 heater_location_upper_setpoint_temperature = 9;
	uint32 heater_location_lower_setpoint_temperature = 10;
	uint32 heater_index = 11;
	FanNumber fan_number = 12;
   bool logging_is_event_driven = 13;
   uint32 logging_period_seconds = 14;
}

// The controller publishes the SystemCommandResponse message
// in response to a received SystemCommand message from GUI1 or GUI2
// Published by the controller on port 5020 for GUI1
// Published by the controller on port 5023 for GUI2
message SystemCommandResponse
{
	bytes topic = 1;						// RSP
	bytes requester_ip_address = 2;
	uint32 sequence_number = 3;
	SystemCommands command = 4;
	SystemCommandResponses response = 5;
	SlotNumber slot_number = 6;
	uint32 temperature = 7;
	google.protobuf.Timestamp start_time = 8;
	google.protobuf.Timestamp end_time = 9;
	uint32 heater_location_upper_setpoint_temperature = 10;
	uint32 heater_location_lower_setpoint_temperature = 11;
	uint32 heater_index = 12;
}


// GUI1 publishes the TimeSync message in order to keep
// the controller's clock in sync with the RTC on the GUI1 or GUI2
// Published by GUI1 on port 5031
// Published by GUI1 on port 5032
message TimeSync
{
	bytes topic = 1;						// TIME
	bytes sender_ip_address = 2;
	uint32 sequence_number = 3;
	bool is_master = 4;
	google.protobuf.Timestamp current_time = 5;
	bytes time_zone = 6;
}


// GUI1 publishes the FirmwareUpdate message once a 
// USB stick is inserted then the controller will scp all of the .deb files
// from the USB stick to its local memory
// Published by GUI1 on port 5041
message FirmwareUpdate
{
	bytes topic = 1;						// FWUP
	bytes sender_ip_address = 2;
	uint32 sequence_number = 3;
	bytes username = 4;
	bytes password = 5;
	bytes file_path = 6;
}

// The controller publishes the FirmwareUpdateResult message with
// the results of the firmware update after processing all of the
// downloaded .deb files
// Published by the controller on port 5040
// An example result text is the .deb file name followed by either
// "Success" or "Failed" followed by a newline "\n"
// For example:
// packageA.deb Success
// packageB.deb Failed
// packageC.deb Success
message FirmwareUpdateResult
{
	bytes topic = 1;						// FWRS
	bytes controller_ip_address = 2;
	uint32 sequence_number = 3;
	bytes result_text = 4;
}


message RTDData
{
   uint32 rtd_number = 1;
   bytes  location = 2;
   uint32 raw_counts = 3;
   int32  temperature = 4;
   float  voltage = 5;
   bool   is_shorted = 6;
   bool   is_open = 7;
   bytes  temp_data_filename = 8;
}

message ReadRTDs
{
   bytes  topic = 1;                 // RTD
	bytes  controller_ip_address = 2;
	uint32 sequence_number = 3;
	uint32 hardware_revision = 4;
	repeated RTDData rtd_data = 5;
}
